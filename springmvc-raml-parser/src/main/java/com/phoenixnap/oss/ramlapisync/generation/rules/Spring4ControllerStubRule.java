package com.phoenixnap.oss.ramlapisync.generation.rules;

import com.phoenixnap.oss.ramlapisync.data.ApiControllerMetadata;
import com.phoenixnap.oss.ramlapisync.generation.rules.basic.*;
import com.phoenixnap.oss.ramlapisync.generation.rules.spring.*;
import com.sun.codemodel.JCodeModel;
import com.sun.codemodel.JDefinedClass;

/**
 * A code generation Rule that provides a simple Controller stub class with Spring4 annotations and empty method bodies.
 * This is the default code generation rule formally executed by the RamlGenerator.generateClassForRaml(...) method.
 * A raml endpoint called /people for example would generate an artefact like this:
 *
 * @RestController
 * @RequestMapping("/people")
 * class PeopleController {
 *
 *     @RequestMapping(value="", method=RequestMethod.GET)
 *     public ResponseEntity getPeople() {
 *         return null; // TODO Autogenerated Method Stub. Implement me please.
 *     }
 * }
 *
 * After code generation the user has to implement the method bodies.
 * So this solution is mainly usefull for one time code generation.
 *
 * @author armin.weisser
 * @since 0.3.2
 */
public class Spring4ControllerStubRule implements Rule<JCodeModel, JDefinedClass, ApiControllerMetadata> {

    @Override
    public JDefinedClass apply(ApiControllerMetadata metadata, JCodeModel generatableType) {

        GenericJavaClassRule generator = new GenericJavaClassRule()
                .setPackageRule(new PackageRule())
                .setClassCommentRule(new ClassCommentRule())
                .addClassAnnotationRule(new Spring4RestControllerAnnotationRule())
                .addClassAnnotationRule(new SpringRequestMappingClassAnnotationRule())
                .setClassRule(new ControllerClassDeclarationRule())
                .setMethodCommentRule(new MethodCommentRule())
                .addMethodAnnotationRule(new SpringRequestMappingMethodAnnotationRule())
                .addMethodAnnotationRule(new SpringResponseBodyMethodAnnotationRule())
                .setMethodSignatureRule(new ControllerMethodSignatureRule(
                        new SpringSimpleResponseTypeRule(),
                        new SpringMethodParamsRule()
                ))
                .setMetodBodyRule(new ImplementMeMethodBodyRule());

        return generator.apply(metadata, generatableType);
    }
}
